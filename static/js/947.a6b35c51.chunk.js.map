{"version":3,"file":"static/js/947.a6b35c51.chunk.js","mappings":"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","sources":["components/Pages/MovieDetails.jsx"],"sourcesContent":["import { getMovieDetails } from 'components/Services/api';\nimport { useState, useEffect, Suspense } from 'react';\nimport { useLocation, useParams, Link, Outlet } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport Loader from 'components/Loader/Loader';\nimport noPoster from 'image/no-poster.jpg';\nimport './MovieDetailStyle.css';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const location = useLocation();\n  const backLink = location.state?.from || '/';\n\n  useEffect(() => {\n    const movieDetails = async () => {\n      try {\n        const movie = await getMovieDetails(movieId);\n        setMovieDetails(movie);\n      } catch (error) {\n        Notiflix.Notify.failure(`${error}`, {\n          position: 'center-top',\n        });\n      }\n    };\n    movieDetails();\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return <Loader />;\n  }\n\n  const { poster_path, title, vote_average, overview, genres } = movieDetails;\n  const moviePopularity = Math.round(vote_average * 10);\n\n  return (\n    <div className=\"MovieDetailsContainer\">\n      <Link to={backLink} className=\"backLink\">\n        <button className=\"goBackBtn\">Go Back</button>\n      </Link>\n      <div className=\"MovieDetails\">\n        <img\n          className=\"movieDetailImg\"\n          width=\"500px\"\n          height=\"600px\"\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500${poster_path}`\n              : noPoster\n          }\n          alt={title}\n        />\n        <div className=\"MovieDetailDescription\">\n          <h1 className=\"Title\">{title}</h1>\n          <h2 className=\"UserScore\">User Score: {moviePopularity}%</h2>\n          <h2>Overview</h2>\n          <p className=\"Overview\">{overview}</p>\n          <h2>Genres</h2>\n          <p className=\"Genres\">\n            {genres.map(genre => (\n              <span key={genre.id}> {genre.name}</span>\n            ))}\n          </p>\n        </div>\n      </div>\n      <div className=\"additionInfoContainer\">\n        <h2>Addition Information</h2>\n        <Link to=\"cast\" className=\"MovieDetailLinks\">\n          <button className=\"MovieDetailBtn\">Cast</button>\n        </Link>\n        <Link to=\"reviews\" className=\"MovieDetailBtn\">\n          <button className=\"MovieDetailBtn\">Reviews</button>\n        </Link>\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["_location$state","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieDetails","setMovieDetails","backLink","useLocation","state","from","useEffect","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","movie","_context","prev","next","getMovieDetails","sent","t0","Notiflix","concat","position","stop","apply","arguments","_jsx","Loader","poster_path","title","vote_average","overview","genres","moviePopularity","Math","round","_jsxs","className","children","Link","to","width","height","src","noPoster","alt","map","genre","name","id","Suspense","fallback","Outlet"],"sourceRoot":""}